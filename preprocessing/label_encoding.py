import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import ast
import ipaddress
import sys

def convert_to_seconds(time_str):
    try:
        if isinstance(time_str, float):
            if pd.isnull(time_str):
                return 0
            return time_str
        units = {'m': 60, 's': 1, 'ms': 0.001}
        total_seconds = 0
        number = float(''.join(filter(str.isdigit, time_str)))
        unit = ''.join(filter(str.isalpha, time_str))
        total_seconds += number * units.get(unit, 0)
        return total_seconds
    except:
        print(time_str)
        raise

# Function to remove duplicate columns with the same suffix and check if values are the same
def remove_and_rename_columns(df, suffix_x='_x', suffix_y='_y'):
    new_df = df.copy()
    columns_to_remove = []

    for column_x in df.columns:
        if column_x.endswith(suffix_x) and column_x[:-len(suffix_x)] + suffix_y in df.columns:
            column_y = column_x[:-len(suffix_x)] + suffix_y

            # Check if values are the same
            if (df[column_x] == df[column_y]).all():
                columns_to_remove.append(column_y)

    # Remove columns from the new DataFrame
    new_df.drop(columns=columns_to_remove, inplace=True)

    # Rename columns without the suffix
    for column in columns_to_remove:
        new_column_name = column[:-len(suffix_y)]
        new_df.rename(columns={column: new_column_name}, inplace=True)

    return new_df

def remove_column_suffix(df, suffix):
    """
    Remove the specified suffix from column names in a DataFrame.

    Parameters:
    - df: pandas DataFrame
    - suffix: str, the suffix to be removed from column names

    Returns:
    - new_df: pandas DataFrame, a new DataFrame with column names without the specified suffix
    """
    new_df = df.copy()

    # Remove the specified suffix from column names
    new_df.columns = [col[:-len(suffix)] if col.endswith(suffix) else col for col in new_df.columns]

    return new_df

def count_n_ip_in_list(x):
    ip_list = x.strip('[]').split(',')
    num_ips = sum(1 for ip_str in ip_list if ipaddress.IPv4Address(ip_str.strip()))
    return num_ips

def mean_ascii_sum(x: list[str]):
    if isinstance(x, float):
        if pd.isnull(x):
            return 0
        return x
    s = sum([ord(_) for _ in str(x)])
    
    return s/len(str(x))

def convert_tls_ver(tls_str):
    try:
        return int(tls_str[-2:])
    except:
        return int(tls_str[-1])

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Usage: python3 label_encoding.py <src_csv> <dst_csv>")
        exit(0)
    
    source_path = sys.argv[1]
    dest_path = sys.argv[2]
    data = pd.read_csv(source_path)
    selected_conn_column_name = ['proto', 
                             'service',
                             'duration',
                             'conn_state',
                             'history',
                             'orig_bytes',
                             'resp_bytes',
                             'orig_pkts',
                             'orig_ip_bytes',
                             'resp_pkts',
                             'resp_ip_bytes',
                             'missed_bytes']


    selected_ssl_column_name = ['version',
                                'cipher',
                                
                                'resumed',
                                'established',
                                'next_protocol',
                                'validation_status']

    selected_x509_column_name = ['certificate.version',
                                'certificate.key_alg', 
                                'certificate.sig_alg',
                                'certificate.key_type',
                                'certificate.key_length',
                                
                                'basic_constraints.ca',
                                ]

    column_to_be_label_encoded = ['server_name_len', 'san_dns_num', 'san_ip_num', 'curve','lets_encrypt']
    test = remove_and_rename_columns(data)
    test = remove_column_suffix(test, '_x')
    encoder = LabelEncoder()
    test['curve'] = encoder.fit_transform(test['certificate.curve'])
    test['server_name_len'] = test['server_name'].apply(lambda x: len(x) if str(x) != 'nan' else 0)
    test['san_dns_num'] = test['san.dns'].apply(lambda x: len(ast.literal_eval(x)) if pd.notnull(x) else 0)
    test['san_ip_num'] = test['san.ip'].apply(lambda x: count_n_ip_in_list(x) if pd.notnull(x) else 0)
    test['lets_encrypt'] = test['certificate.issuer'].apply(lambda x: 1 if "Let's Encrypt" in x else 0)
    final = test[selected_conn_column_name + selected_ssl_column_name + selected_x509_column_name + column_to_be_label_encoded]
    final['proto'] = final['proto'].apply(lambda x: 1 if x=='tcp' else 0)
    final['service'] = final['service'].apply(lambda x: 1 if x=='ssl' else 0)
    final['duration'] = final['duration'].apply(convert_to_seconds)
    final['conn_state'] = encoder.fit_transform(final['conn_state'])
    final['history'] = final['history'].apply(mean_ascii_sum)
    final['version'] = final['version'].apply(convert_tls_ver)
    final['cipher'] = final['cipher'].apply(mean_ascii_sum)
    final['next_protocol'] = final['next_protocol'].apply(mean_ascii_sum)
    final['validation_status'] = final['validation_status'].apply(mean_ascii_sum)
    final['certificate.key_alg'] = encoder.fit_transform(final['certificate.key_alg'])
    final['certificate.sig_alg'] = final['certificate.sig_alg'].apply(mean_ascii_sum)
    final['certificate.key_type'] = encoder.fit_transform(final['certificate.key_type'])
    final['basic_constraints.ca'] = final['basic_constraints.ca'].apply(mean_ascii_sum)
    final.to_csv(dest_path, index=False)
    